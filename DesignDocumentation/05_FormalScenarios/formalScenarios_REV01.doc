{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \fs20\lang1033\kerning28\cgrid \snext0 Normal;}{\s1\qj\keepn\nowidctlpar\nooverflow\faauto\outlinelevel0\rin0\lin0\itap0 \b\ul\lang1033\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb240\sa60\keepn\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \b\i\f5\fs28\lang1033\kerning28\cgrid \sbasedon0 \snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \lang1033\kerning28\cgrid \sbasedon0 \snext15 Body Text;}}{\info{\author Mike Philippone}{\operator Mike Philippone}{\creatim\yr2008\mo11\dy6\hr11\min12}{\revtim\yr2008\mo11\dy8\hr18\min17}{\version57}{\edmins25}{\nofpages3}{\nofwords1103}{\nofchars6292}{\*\company Ithaca College}{\nofcharsws7727}{\vern16411}}\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dgmargin\dghspace120\dgvspace120\dghorigin1800\dgvorigin1440\dghshow0\dgvshow3\jcompress\viewkind1\viewscale133\nolnhtadjtbl \fet0{\*\docvar {ColorPos}{-1}}{\*\docvar {ColorSet}{-1}}{\*\docvar {StylePos}{-1}}{\*\docvar {StyleSet}{-1}}\sectd \pgnrestart\linex0\footery864\sectdefaultcl {\header \pard\plain \nowidctlpar\tqc\tx4320\tqr\tx8640\nooverflow\faauto\rin0\lin0\itap0 \fs20\lang1033\kerning28\cgrid {\kerning0 \par }}{\footer \pard\plain \nowidctlpar\tqc\tx4320\tqr\tx8640\nooverflow\faauto\rin0\lin0\itap0 \fs20\lang1033\kerning28\cgrid {\kerning0 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \fs20\lang1033\kerning28\cgrid {\fs28 Formal Scenarios\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Note:}{\fs24  server == server machine, not Server object.\par }{\b\fs24 \par }{\b\fs24\ul Startup (success)\par }{\b\fs24 Previous Scenario}{\fs24 : None\par }{\b\fs24 Scenario}{\fs24 : \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The server-side computer is turned on and the server-side software is launched.  On launch, the Server creates the ServerListener, GameLogic and Users objects.  GameLogic creates the Cards object and the GameBoard object, which in turn creates the Pieces and  Rooms.  \par Meanwhile, on the client-side computers the client-side software is launched.  On launch the Client creates the GUI, BoardModel and ClientSocket objects.  The client GUI presents a list of fields to be filled in, including player name and player IP address.  Upon hitting a send button on the GUI, a message is sent to the now-waiting ServerListener.  \par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The ServerListener reads the information and creates a connection by calling on the Users to create a Player with a ClientSocket.  The Users logs the order in which the Players connect, assigning pieces and starting-positions based on connection order.  \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 Once the requisite number of Players has been reached, GameLogic randomizes the room, player, and weapon cards.  One of each type is set aside for the goal.  The others are distributed\emdash via the server-side ClientSocket\emdash to the Clients.  The Server then populates the GameBoard with the players data (who is starting where, etc). The Server then pushes the GameBoard model to the connected Clients.  The Clients then updates the GUI with the new board, card and player information.  Finally, the Server orders GameLogic to start game play, which allows the first-connected client to begin game play.\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Next Scenario}{\fs24 : Move\par \par }{\b\fs24\ul Startup (fail)\par }{\b\fs24 Previous Scenario}{\fs24 : None\par }{\b\fs24 Scenario}{\fs24 :  \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The server-side computer is turned on and the server-side software is launched.  On launch, the Server creates the ServerListener, GameLogic and Users objects.  GameLogic creates the Cards object and the GameBoard object, which in turn creates the Pieces and  Rooms.\par Meanwhile, on the client-side computers the client-side software is launched.  On launch the Client creates the GUI, BoardModel and ClientSocket objects.  The client GUI presents a list of fields to be filled in, including player name and player IP address.  Upon hitting a send button on the GUI, a message is sent to the now-waiting ServerListener.  \par As the Server attempts to read the message, it is unable to establish a connection with the client.  The Server ignores the attempt and continues waiting.  The client GUI, upon not receiving a verification or connection, displays a message stating the connection was refused.\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Next Scenario}{\fs24 : None\par \par \par \par }\pard\plain \s1\qj\keepn\nowidctlpar\nooverflow\faauto\outlinelevel0\rin0\lin0\itap0 \b\ul\lang1033\kerning28\cgrid {Move\par }\pard\plain \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \fs20\lang1033\kerning28\cgrid {\b\fs24 Previous Scenario}{\fs24 : Begin or Move\par }\pard\plain \s15\qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \lang1033\kerning28\cgrid {\b Scenario}{: \par }\pard \s15\qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {The game play has started.  A new move is determined by the GameLogic when it receives a message that the previous turn has ended from the previous player.  GameLogic generates a random number between 1 and 6 and sends it to the next player.  The GameLogic determines all possible ending points based on the number from the \ldblquote roll\rdblquote .  The GameBoard sends\emdash to the player\rquote s BoardModel\emdash a game board to display with all the endpoints (ie: into a room, out of a room, along corridor, or through tunnel) highlighted for the player.  The player then chooses which way and how far to move.  This can be into a room, out of a room, through a corridor, or secret passage, all determined by the GameLogic. The client receives this number and it is displayed on the GUI in the roll field.  The player selects one of the endpoints.  This new position is sent to the server.  The GameLogic verifies the new position and then updates all client boards and the piece to reflect the new position.  \par }\pard \s15\qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b Next Scenario}{: Move, Guess, Accuse\par }\pard\plain \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 \fs20\lang1033\kerning28\cgrid {\fs24 \par }{\b\fs24\ul Guess}{\fs24 \par }{\b\fs24 Previous Scenario}{\fs24 : Move\par }{\b\fs24 Scenario}{\fs24 : \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The player has just entered a room and is prompted on his/her GUI to make a guess regarding that room.  The player has the option to make the guess or pass on it.  If they choose to make the guess they are prompted (via GUI) for a character, a weapon and the current room is implied.  These are chosen by a series of radio buttons for characters, weapons and rooms.  Once the player chooses the guess attributes, the guess is sent to the server.  The Server contacts the GameLogic.  The GameLogic finds which player was guessed and has the GameBoard changed so that the guessed player is moved to the corresponding room.  The GameLogic determines that the guessed cards are held by no other player.  All of the players are notified by the server that a guess has been made, what the guess was and that it was not disproved.  All of the boards are updated to reflect the changes made by the guess.\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Next Scenario}{\fs24 : Move or Accuse\par \par }{\b\fs24\ul Guess (Disproved)\par }{\b\fs24 Previous Scenario}{\fs24 : Move\par }{\b\fs24 Scenario}{\fs24 : \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The player has just entered a room and is prompted on his/her GUI to make a guess regarding that room.  The player has the option to make the guess or pass on it.  If they choose to make the guess they are prompted (via GUI) for a character, a weapon and the current room is implied.  These are chosen by a series of radio buttons for characters, weapons and rooms.  Once the player chooses the guess attributes, the guess is sent to the server.  The GameLogic finds which player was guessed and changes the GameBoard so that the guessed player is moved to the corresponding room.  The GameLogic takes the guess and matches the cards to players.  The GameLogic will order the players in order of joining with the guessing player as first.  The first card holder will be forced to show a card.  If that player only has one, it is sent to the guessing player as proof and the card holder is notified they disproved the guess with their card.  If that player has two or more of the guessed cards, that player will be prompted for which to show the player.  The GameLogic then notifies all players that a guess has been made, what the guess was and that it was disproved.  All of the boards are updated to reflect the changes made by the guess.\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Next Scenario}{\fs24 : Move or Accuse\par \par }{\b\fs24\ul Accuse (win)\par }{\b\fs24 Previous Scenario}{\fs24 : Any game-play scenario\par }{\b\fs24 Scenario}{\fs24 : \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The player, at any point in their turn, can elect to make an accusation and is prompted on his/her GUI to specify which character, which weapon, and which room they would like to accuse.  The Server then contacts the GameLogic.  It will attempt to match the accusation against the secret cards.  It finds all three match.  The Server then notifies all players that an accusation has been made, what the cards were and that the player has won.  The Server then destroys the Players and waits for players to connect for another game.  The Client then shows the opening screen on the GUI.\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Next Scenario}{\fs24 : }{\i\fs24 NA}{\fs24  \par \par }{\b\fs24\ul Accuse (lose)\par }{\b\fs24 Previous Scenario}{\fs24 : Any game-play scenario\par }{\b\fs24 Scenario}{\fs24 : \par }\pard \qj\fi720\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\fs24 The player, at any point in their turn, can elect to make an accusation and is prompted on his/her GUI to specify which character, which weapon, and which room they would like to accuse.  The Server then contacts the GameLogic which attempts to match the accusation against the secret cards.  The cards do not match and the player\rquote s accusation is refuted by showing him/her the appropriate secret cards.  The Server then notifies all players that an accusation has been made, what the cards were and that the player has lost but will continue to play only as far as proving or disproving guesses by other players.  If this player is the last player to make an incorrect accusation, the game ends with no winners and all are notified that the game is over.  The Server then destroys the Players and waits for players to connect for another game.  The Client then shows the opening screen on the GUI.\par }\pard \qj\nowidctlpar\nooverflow\faauto\rin0\lin0\itap0 {\b\fs24 Next Scenario}{\fs24 : }{\i\fs24 NA}{\fs24  \par }}